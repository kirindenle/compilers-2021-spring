-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c@[state, world], stmt) {
  -- printf("\n    c = %s, stmt = %s\n", c.string, showStmt(stmt, "; "));
  case stmt of
    Assn(v, e)    ->
    var n = evalExpr(state, e)
    ;[state <- [v, n], world]
  | Seq(lhs, rhs) -> eval(eval(c, lhs), rhs)
  | Skip          -> c
  | Read(x)    -> case readWorld(world) of [value, worldNew] -> [state <- [x, value], worldNew] esac
  | Write(e)   ->
    var eValue = evalExpr(state, e)
    ;var worldNew = writeWorld(eValue, world)
    ;[state, worldNew]
  esac
}

public fun showStmt(stmt, sep) {
  case stmt of
    Assn(v, e)    -> sprintf("%s := %s", v.string, showExpr(e))
  | Seq(lhs, rhs) -> sprintf("%s%s%s", showStmt(lhs, sep), sep, showStmt(rhs, sep))
  | Skip          -> "skip"
  | Read(vName)   -> sprintf("read%s", vName.string)
  | Write(e)      -> sprintf("write%s", showExpr(e))
  esac
}

public fun den_eval (c, stmt) {
  eval(c, stmt)
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
